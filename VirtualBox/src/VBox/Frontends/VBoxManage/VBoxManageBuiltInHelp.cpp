/* Autogenerated by C:/newbuild/MassVM/out/win.amd64/release/obj/manual/docbook-refentry-to-C-help.xsl, do not edit! */

#include "VBoxManageBuiltInHelp.h"



static const RTMSGREFENTRYSTR g_vboxmanage_debugvm_synopsis[] =
{
    {   HELP_SCOPE_DEBUGVM_DUMPVMCORE | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_DUMPVMCORE | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> dumpvmcore [--filename=name]" },
    {   HELP_SCOPE_DEBUGVM_INFO | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_INFO | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> info <item> [args...]" },
    {   HELP_SCOPE_DEBUGVM_INJECTNMI | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_INJECTNMI | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> injectnmi" },
    {   HELP_SCOPE_DEBUGVM_LOG | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_LOG | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> log [[--release] | [--debug]] [group-settings...]" },
    {   HELP_SCOPE_DEBUGVM_LOGDEST | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_LOGDEST | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> logdest [[--release] | [--debug]] [destinations...]" },
    {   HELP_SCOPE_DEBUGVM_LOGFLAGS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_LOGFLAGS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> logflags [[--release] | [--debug]] [flags...]" },
    {   HELP_SCOPE_DEBUGVM_OSDETECT | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_OSDETECT | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> osdetect" },
    {   HELP_SCOPE_DEBUGVM_OSINFO | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_OSINFO | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> osinfo" },
    {   HELP_SCOPE_DEBUGVM_OSDMESG | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_OSDMESG | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> osdmesg [--lines=lines]" },
    {   HELP_SCOPE_DEBUGVM_GETREGISTERS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_GETREGISTERS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> getregisters [--cpu=id] [reg-set.reg-name...]" },
    {   HELP_SCOPE_DEBUGVM_SETREGISTERS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_SETREGISTERS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> setregisters [--cpu=id] [reg-set.reg-name=value...]" },
    {   HELP_SCOPE_DEBUGVM_SHOW | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_SHOW | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> show [[--human-readable] | [--sh-export] | [--sh-eval] | [--cmd-set]] [settings-item...]" },
    {   HELP_SCOPE_DEBUGVM_STACK | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_STACK | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> stack [--cpu=id]" },
    {   HELP_SCOPE_DEBUGVM_STATISTICS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_STATISTICS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> statistics [--reset] [--descriptions] [--pattern=pattern]" },
};
static const RTMSGREFENTRYSTR g_vboxmanage_debugvm_full_help[] =
{
    {   HELP_SCOPE_DEBUGVM,
        "MassManage debugvm -- Introspection and guest debugging." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_GLOBAL,
        "Usage" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "=====" },
    {   HELP_SCOPE_DEBUGVM_DUMPVMCORE | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_DEBUGVM_DUMPVMCORE | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> dumpvmcore [--filename=name]" },
    {   HELP_SCOPE_DEBUGVM_INFO | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> info <item> [args...]" },
    {   HELP_SCOPE_DEBUGVM_INJECTNMI | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> injectnmi" },
    {   HELP_SCOPE_DEBUGVM_LOG | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> log [[--release] | [--debug]] [group-settings...]" },
    {   HELP_SCOPE_DEBUGVM_LOGDEST | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> logdest [[--release] | [--debug]] [destinations...]" },
    {   HELP_SCOPE_DEBUGVM_LOGFLAGS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> logflags [[--release] | [--debug]] [flags...]" },
    {   HELP_SCOPE_DEBUGVM_OSDETECT | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> osdetect" },
    {   HELP_SCOPE_DEBUGVM_OSINFO | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> osinfo" },
    {   HELP_SCOPE_DEBUGVM_OSDMESG | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> osdmesg [--lines=lines]" },
    {   HELP_SCOPE_DEBUGVM_GETREGISTERS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> getregisters [--cpu=id] [reg-set.reg-name...]" },
    {   HELP_SCOPE_DEBUGVM_SETREGISTERS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> setregisters [--cpu=id] [reg-set.reg-name=value...]" },
    {   HELP_SCOPE_DEBUGVM_SHOW | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> show [[--human-readable] | [--sh-export] | [--sh-eval] | [--cmd-set]] [settings-item...]" },
    {   HELP_SCOPE_DEBUGVM_STACK | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> stack [--cpu=id]" },
    {   HELP_SCOPE_DEBUGVM_STATISTICS | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bdebugvm <uuid|vmname> statistics [--reset] [--descriptions] [--pattern=pattern]" },
    {   RTMSGREFENTRYSTR_SCOPE_GLOBAL, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Description" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "===========" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "  The \"debugvm\" commands are for experts who want to tinker with the exact details of virtual machine execution. Like the VM debugger, these commands are only useful if you are very familiar with the details of the PC architecture and how to debug software." },
    {   RTMSGREFENTRYSTR_SCOPE_GLOBAL, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Common options" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    The subcommands of debugvm all operate on a running virtual machine:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <uuid|vmname>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Either the UUID or the name (case sensitive) of a VM." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_DUMPVMCORE, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm dumpvmcore" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ------------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> dumpvmcore [--filename=name]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Creates a system dump file of the specified VM. This file will have the standard ELF core format (with custom sections)." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    This corresponds to the writecore command in the debugger." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --filename=<filename>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The name of the output file." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_INFO, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm info" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> info <item> [args...]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Displays info items relating to the VMM, device emulations and associated drivers." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    This corresponds to the info command in the debugger." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <info>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Name of the info item to display. The special name help will list all the available info items and hints about optional arguments." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <args>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Optional argument string for the info item handler. Most info items does not take any extra arguments. Arguments not recognized are generally ignored." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_INJECTNMI, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm injectnmi" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    -----------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> injectnmi" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Causes a non-maskable interrupt (NMI) to be injected into the guest. This might be useful for certain debugging scenarios. What happens exactly is dependent on the guest operating system, but an NMI can crash the whole guest operating system. Do not use unless you know what you're doing." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_LOG, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm log" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    -----------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> log [[--release] | [--debug]] [group-settings...]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Changes the group settings for either debug (--debug) or release (--release) logger of the VM process." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    The <group-settings> are typically strings on the form em.e.f.l, hm=~0and -em.f. Basic wildcards are supported for group matching. The all group is an alias for all the groups." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Please do keep in mind that the group settings are applied as modifications to the current ones." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    This corresponds to the log command in the debugger." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_LOGDEST, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm logdest" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ---------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> logdest [[--release] | [--debug]] [destinations...]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Changes the destination settings for either debug (--debug) or release (--release) logger of the VM process. For details on the destination format, the best source is src/VBox/Runtime/common/log/log.cpp." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    The <destinations> is one or more mnemonics, optionally prefixed by \"no\" to disable them. Some of them take values after a \":\" or \"=\" separator. Multiple mnemonics can be separated by space or given as separate arguments on the command line." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    List of available destination:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    file[=<file>],\bnofile" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Specifies a log file. It no filname is given, one will be generated based on the current UTC time and VM process name and placed in the current directory of the VM process. Note that this will currently not have any effect if the log file has already been opened." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    dir=<directory>,\bnodir" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Specifies the output directory for log files. Note that this will currently not have any effect if the log file has already been opened." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    history=<count>,\bnohistory" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        A non-zero value enables log historization, with the value specifying how many old log files to keep." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    histsize=<bytes>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The max size of a log file before it is historized. Default is infinite." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    histtime=<seconds>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The max age (in seconds) of a log file before it is historized. Default is infinite." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ringbuffer,\bnoringbuffer" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Only log to the log buffer until an explicit flush (e.g. via an assertion) occurs. This is fast and saves diskspace." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    stdout,\bnostdout" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Write the log content to standard output." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    stdout,\bnostdout" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Write the log content to standard error." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugger,\bnodebugger" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Write the log content to the debugger, if supported by the host OS." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    com,\bnocom" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Writes logging to the COM port. This is only applicable for raw-mode and ring-0 logging." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    user,\bnouser" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Custom destination which has no meaning to VM processes.." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    This corresponds to the logdest command in the debugger." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_LOGFLAGS, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm logflags" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ----------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> logflags [[--release] | [--debug]] [flags...]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Changes the flags on either debug (--debug) or release (--release) logger of the VM process. Please note that the modifications are applied onto the existing changes, they are not replacing them." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    The <flags> are a list of flag mnemonics, optionally prefixed by a \"no\", \"!\", \"~\" or \"-\" to negate their meaning. The \"+\" prefix can be used to undo previous negation or use as a separator, though better use whitespace or separate arguments for that." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    List of log flag mnemonics, with their counter form where applicable (asterisk indicates defaults):" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    enabled*,\bdisabled" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Enables or disables logging." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    buffered,\bunbuffered*" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Enabling buffering of log output before it hits the destinations." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    writethrough(/writethru)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Whether to open the destination file with writethru buffering settings or not." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    flush" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Enables flushing of the output file (to disk) after each log statement." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    lockcnts" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with lock counts for the current thread." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    cpuid" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the ID of the current CPU." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    pid" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current process ID." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    flagno" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the numberic flags corresponding to the log statement." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    flag" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the flag mnemonics corresponding to the log statement." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    groupno" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the log group number for the log statement producing it." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    group" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the log group name for the log statement producing it." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    tid" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current thread identifier." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    thread" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current thread name." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    time" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current UTC wall time." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    timeprog" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current monotonic time since the start of the program." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    msprog" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current monotonic timestamp value in milliseconds since the start of the program." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ts" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current monotonic timestamp value in nanoseconds." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    tsc" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Prefix each log line with the current CPU timestamp counter (TSC) value." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    rel,\babs*" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects the whether ts and tsc prefixes should be displayed as relative to the previous log line or as absolute time." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    hex*,\bdec" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects the whether the ts and tsc prefixes should be formatted as hexadecimal or decimal." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    custom" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Custom log prefix, has by default no meaning for VM processes." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    usecrlf,\buself*" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Output with DOS style (CRLF) or just UNIX style (LF) line endings." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    overwrite*,\bappend" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Overwrite the destination file or append to it." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    This corresponds to the logflags command in the debugger." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_OSDETECT, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm osdetect" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ----------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> osdetect" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Make the VMM's debugger facility (re)-detect the guest operating system (OS). This will first load all debugger plug-ins." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    This corresponds to the detect command in the debugger." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_OSINFO, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm osinfo" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> osinfo" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Displays information about the guest operating system (OS) previously detected by the VMM's debugger facility." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_OSDMESG, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm osdmesg" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ---------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> osdmesg [--lines=lines]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Displays the guest OS kernel log, if detected and supported." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --lines=<lines>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Number of lines of the log to display, counting from the end. The default is infinite." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_GETREGISTERS, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm getregisters" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --------------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> getregisters [--cpu=id] [reg-set.reg-name...]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Retrieves register values for guest CPUs and emulated devices." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <reg-set.reg-name>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        One of more registers, each having one of the following forms:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         1. register-set.register-name.sub-field" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         2. register-set.register-name" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         3. cpu-register-name.sub-field" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         4. cpu-register-name" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         5. all" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The <all> form will cause all registers to be shown (no sub-fields). The registers names are case-insensitive." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --cpu=<id>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects the CPU register set when specifying just a CPU register (3rd and 4th form). The default is 0." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_SETREGISTERS, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm setregisters" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --------------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> setregisters [--cpu=id] [reg-set.reg-name=value...]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Changes register values for guest CPUs and emulated devices." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <reg-set.reg-name=value>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        One of more register assignment, each having one of the following forms:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         1. register-set.register-name.sub-field=value" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         2. register-set.register-name=value" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         3. cpu-register-name.sub-field=value" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "         4. cpu-register-name=value" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The value format should be in the same style as what getregisters displays, with the exception that both octal and decimal can be used instead of hexadecimal." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --cpu=<id>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects the CPU register set when specifying just a CPU register (3rd and 4th form). The default is 0." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_SHOW, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm show" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> show [[--human-readable] | [--sh-export] | [--sh-eval] | [--cmd-set]] [settings-item...]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Shows logging settings for the VM." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --human-readable" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects human readable output." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --sh-export" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects output format as bourne shell style export commands." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --sh-eval" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects output format as bourne shell style eval command input." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --cmd-set" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects output format as DOS style SET commands." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <settings-item>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        What to display. One or more of the following:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "          - logdbg-settings - debug log settings." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "          - logrel-settings - release log settings." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "          - log-settings - alias for both debug and release log settings." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_STACK, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm stack" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    -------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> stack [--cpu=id]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Unwinds the guest CPU stacks to the best of our ability. It is recommended to first run the osdetect command, as this gives both symbols and perhaps unwind information." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --cpu=<id>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Selects a single guest CPU to display the stack for. The default is all CPUs." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_DEBUGVM_STATISTICS, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    debugvm statistics" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ------------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bdebugvm <uuid|vmname> statistics [--reset] [--descriptions] [--pattern=pattern]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Displays or resets VMM statistics." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Retrieves register values for guest CPUs and emulated devices." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --pattern=<pattern>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        DOS/NT-style wildcards patterns for selecting statistics. Multiple patterns can be specified by using the '|' (pipe) character as separator." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --reset" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Select reset instead of display mode." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
};
static const RTMSGREFENTRY g_vboxmanage_debugvm =
{
    /* .idInternal = */   HELP_CMD_DEBUGVM,
    /* .Synopsis   = */   { RT_ELEMENTS(g_vboxmanage_debugvm_synopsis), 0, g_vboxmanage_debugvm_synopsis },
    /* .Help       = */   { RT_ELEMENTS(g_vboxmanage_debugvm_full_help), 0, g_vboxmanage_debugvm_full_help },
    /* pszBrief    = */   "introspection and guest debugging"
};


static const RTMSGREFENTRYSTR g_vboxmanage_extpack_synopsis[] =
{
    {   HELP_SCOPE_EXTPACK_INSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_EXTPACK_INSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bextpack\binstall [--replace] <tarball>" },
    {   HELP_SCOPE_EXTPACK_UNINSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_EXTPACK_UNINSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bextpack\buninstall [--force] <name>" },
    {   HELP_SCOPE_EXTPACK_CLEANUP | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_EXTPACK_CLEANUP | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bextpack\bcleanup" },
};
static const RTMSGREFENTRYSTR g_vboxmanage_extpack_full_help[] =
{
    {   HELP_SCOPE_EXTPACK,
        "MassManage extpack -- Extension package management." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_GLOBAL,
        "Usage" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "=====" },
    {   HELP_SCOPE_EXTPACK_INSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_EXTPACK_INSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bextpack\binstall [--replace] <tarball>" },
    {   HELP_SCOPE_EXTPACK_UNINSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bextpack\buninstall [--force] <name>" },
    {   HELP_SCOPE_EXTPACK_CLEANUP | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bextpack\bcleanup" },
    {   RTMSGREFENTRYSTR_SCOPE_GLOBAL, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Description" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "===========" },
    {   HELP_SCOPE_EXTPACK_INSTALL, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    extpack install" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ---------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bextpack\binstall [--replace] <tarball>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Installs a new extension pack on the system. This command will fail if an older version of the same extension pack is already installed. The --replace option can be used to uninstall any old package before the new one is installed." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --replace" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Uninstall existing extension pack version." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <tarball>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The file containing the extension pack to be installed." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_EXTPACK_UNINSTALL, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    extpack uninstall" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    -----------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bextpack\buninstall [--force] <name>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Uninstalls an extension pack from the system. The subcommand will also succeed in the case where the specified extension pack is not present on the system. You can use MassManage\blist\bextpacks to show the names of the extension packs which are currently installed." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --force" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Overrides most refusals to uninstall an extension pack" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <name>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The name of the extension pack to be uninstalled." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_EXTPACK_CLEANUP, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    extpack cleanup" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ---------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bextpack\bcleanup" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Used to remove temporary files and directories that may have been left behind if a previous install or uninstall command failed." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_EXTPACK_UNINSTALL | HELP_SCOPE_EXTPACK, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Examples" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "========" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "  How to list extension packs:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "$\bMassManage\blist\bextpacks" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Extension\bPacks:\b1" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Pack\bno.\b0:\b\b\bOracle\bVM\bVirtualBox\bExtension\bPack" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Version:\b\b\b\b\b\b4.1.12" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Revision:\b\b\b\b\b77218" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Edition:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Description:\b\bUSB\b2.0\bHost\bController,\bVirtualBox\bRDP,\bPXE\bROM\bwith\bE1000\bsupport." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "VRDE\bModule:\b\bVBoxVRDP" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Usable:\b\b\b\b\b\b\btrue" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "  How to remove an extension pack:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "$\bMassManage\bextpack\buninstall\b\"Oracle\bVM\bVirtualBox\bExtension\bPack\"" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
};
static const RTMSGREFENTRY g_vboxmanage_extpack =
{
    /* .idInternal = */   HELP_CMD_EXTPACK,
    /* .Synopsis   = */   { RT_ELEMENTS(g_vboxmanage_extpack_synopsis), 0, g_vboxmanage_extpack_synopsis },
    /* .Help       = */   { RT_ELEMENTS(g_vboxmanage_extpack_full_help), 0, g_vboxmanage_extpack_full_help },
    /* pszBrief    = */   "extension package management"
};


static const RTMSGREFENTRYSTR g_vboxmanage_unattended_synopsis[] =
{
    {   HELP_SCOPE_UNATTENDED_DETECT | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_UNATTENDED_DETECT | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bunattended\bdetect <--iso=install-iso> [--machine-readable]" },
    {   HELP_SCOPE_UNATTENDED_INSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_UNATTENDED_INSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bunattended\binstall <uuid|vmname> <--iso=install-iso> [--user=login] [--password=password] [--password-file=file] [--full-user-name=name] [--key=product-key] [--install-additions] [--no-install-additions] [--additions-iso=add-iso] [--install-txs] [--no-install-txs] [--validation-kit-iso=testing-iso] [--locale=ll_CC] [--country=CC] [--time-zone=tz] [--hostname=fqdn] [--package-selection-adjustment=keyword] [--dry-run] [--auxiliary-base-path=path] [--image-index=number] [--script-template=file] [--post-install-template=file] [--post-install-command=command] [--extra-install-kernel-parameters=params] [--language=lang] [--start-vm=session-type]" },
};
static const RTMSGREFENTRYSTR g_vboxmanage_unattended_full_help[] =
{
    {   HELP_SCOPE_UNATTENDED,
        "MassManage unattended -- Unattended guest OS installation." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_GLOBAL,
        "Usage" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "=====" },
    {   HELP_SCOPE_UNATTENDED_DETECT | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   HELP_SCOPE_UNATTENDED_DETECT | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bunattended\bdetect <--iso=install-iso> [--machine-readable]" },
    {   HELP_SCOPE_UNATTENDED_INSTALL | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "  MassManage\bunattended\binstall <uuid|vmname> <--iso=install-iso> [--user=login] [--password=password] [--password-file=file] [--full-user-name=name] [--key=product-key] [--install-additions] [--no-install-additions] [--additions-iso=add-iso] [--install-txs] [--no-install-txs] [--validation-kit-iso=testing-iso] [--locale=ll_CC] [--country=CC] [--time-zone=tz] [--hostname=fqdn] [--package-selection-adjustment=keyword] [--dry-run] [--auxiliary-base-path=path] [--image-index=number] [--script-template=file] [--post-install-template=file] [--post-install-command=command] [--extra-install-kernel-parameters=params] [--language=lang] [--start-vm=session-type]" },
    {   RTMSGREFENTRYSTR_SCOPE_GLOBAL, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "Description" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "===========" },
    {   HELP_SCOPE_UNATTENDED_DETECT, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    unattended detect" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    -----------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bunattended\bdetect <--iso=install-iso> [--machine-readable]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Detects the guest operating system (OS) on the specified installation ISO and displays the result. This can be used as input when creating a VM for the ISO to be installed in." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --iso=<install-iso>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The installation ISO to run the detection on." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --machine-readable" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Produce output that is simpler to parse from a script." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   HELP_SCOPE_UNATTENDED_INSTALL, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    unattended install" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    ------------------" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS, "" }, 
    {   RTMSGREFENTRYSTR_SCOPE_SAME | RTMSGREFENTRYSTR_FLAGS_SYNOPSIS,
        "    MassManage\bunattended\binstall <uuid|vmname> <--iso=install-iso> [--user=login] [--password=password] [--password-file=file] [--full-user-name=name] [--key=product-key] [--install-additions] [--no-install-additions] [--additions-iso=add-iso] [--install-txs] [--no-install-txs] [--validation-kit-iso=testing-iso] [--locale=ll_CC] [--country=CC] [--time-zone=tz] [--hostname=fqdn] [--package-selection-adjustment=keyword] [--dry-run] [--auxiliary-base-path=path] [--image-index=number] [--script-template=file] [--post-install-template=file] [--post-install-command=command] [--extra-install-kernel-parameters=params] [--language=lang] [--start-vm=session-type]" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Reconfigures the specified VM for installation and optionally starts it up." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    <uuid|vmname>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Either the UUID or the name (case sensitive) of a VM." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --iso=<install-iso>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The installation ISO to run the detection on." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --user=<login>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The login name. (default: vboxuser)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --password=<password>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The login password. This is used for the user given by --user as well as the root/administrator user. (default: changeme)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --password-file=<file>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Alternative to --password for providing the password. Special filename stdin can be used to read the password from standard input." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --full-user-name=<name>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The full user name. (default: --user)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --key=<product-key>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The guest OS product key. Not all guest OSes requires this." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --install-additions, --no-install-additions" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Whether to install the VirtualBox guest additions. (default: --no-install-addations)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --additions-iso=<add-iso>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Path to the VirtualBox guest additions ISO. (default: installed/downloaded GAs)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --install-txs, --no-install-txs" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Whether to install the test execution service (TXS) from the VirtualBox ValidationKit. This is useful when preparing VMs for testing or similar. (default: --no-install-txs)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --validation-kit-iso=<testing-iso>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Path to the VirtualBox ValidationKit ISO. This is required if --install-txsis specified." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --locale=<ll_CC>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The base locale specification for the guest, like en_US, de_CH, or nn_NO. (default: host or en_US)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --country=<CC>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The two letter country code if it differs from the specified by --location." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --time-zone=<tz>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The time zone to set up the guest OS with. (default: host time zone or UTC)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --hostname=<fqdn>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The fully qualified domain name of the guest machine. (default: <vmname>.myguest.virtualbox.org)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --package-selection-adjustment=<keyword>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Adjustments to the guest OS packages/components selection. This can be specfied more than once. Currently the only recognized keyword is minimal which triggers a minimal installation for some of the guest OSes." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --dry-run" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Do not create any files or make any changes to the VM configuration." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --start-vm=<session-type>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Start the VM using the front end given by <session-type>. This is the same as the --type option for the startvm command, but we have add none for indicating that the VM should not be started. (default: none)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    Advanced options:" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --auxiliary-base-path=<path>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The path prefix to the media related files generated for the installation. (default: <vm-config-dir>/Unattended-<vm-uuid>-)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --image-index=<number>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Windows installation image index. (default: 1)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --script-template=<file>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The unattended installation script template. (default: IMachine::OSTypeId dependent)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --post-install-template=<file>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        The post installation script template. (default: IMachine::OSTypeId dependent)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --post-install-command=<command>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        A single command to run after the installation is completed. The exact format and exactly when this is run is guest OS installer dependent." },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --extra-install-kernel-parameters=<params>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        List of extra linux kernel parameters to use during the installation. (default: IMachine::OSTypeId dependent)" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "    --language=<lang>" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME,
        "        Specifies the UI language for a Windows installation. The <lang> is generally on the form {ll}-{CC}. See detectedOSLanguages results from MassManage\bunattended\bdetect. (default: detectedOSLanguages[0])" },
    {   RTMSGREFENTRYSTR_SCOPE_SAME, "" },
};
static const RTMSGREFENTRY g_vboxmanage_unattended =
{
    /* .idInternal = */   HELP_CMD_UNATTENDED,
    /* .Synopsis   = */   { RT_ELEMENTS(g_vboxmanage_unattended_synopsis), 0, g_vboxmanage_unattended_synopsis },
    /* .Help       = */   { RT_ELEMENTS(g_vboxmanage_unattended_full_help), 0, g_vboxmanage_unattended_full_help },
    /* pszBrief    = */   "unattended guest OS installation"
};

PCRTMSGREFENTRY     g_apHelpEntries[] = 
{
    &g_vboxmanage_debugvm, 
    &g_vboxmanage_extpack, 
    &g_vboxmanage_unattended, 
};
const uint32_t g_cHelpEntries = RT_ELEMENTS(g_apHelpEntries);

